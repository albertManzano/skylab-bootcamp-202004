{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/betho/bootcamp/collab/skylab-bootcamp-202004/staff/albert-manzano/aquaponics/aquaponics-app/src/components/Charts/index.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { LineChart, StackedBarChart } from \"react-native-chart-kit\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Navbar from \"../Navbar\";\nimport SideBar from \"../SideBar\";\nimport styles from \"./styles\";\nimport { retrievePh, retrieveTemperature } from 'aquaponics-client-logic';\n\nfunction Charts(_ref) {\n  var role = _ref.role,\n      onGoToManager = _ref.onGoToManager,\n      onGoToCalendar = _ref.onGoToCalendar,\n      onGoToCharts = _ref.onGoToCharts,\n      onGoToForecast = _ref.onGoToForecast,\n      onGoToGreenhouse = _ref.onGoToGreenhouse,\n      onGoToLogout = _ref.onGoToLogout;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      temperatures = _useState2[0],\n      setTemps = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      phs = _useState4[0],\n      setPhs = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      displayed = _useState6[0],\n      setSide = _useState6[1];\n\n  var handleSide = function handleSide() {\n    return setSide(!displayed);\n  };\n\n  useEffect(function () {\n    var timer = setTimeout(function () {\n      (function _callee() {\n        var tempResult, _temperatures, phResult, _phs;\n\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return _regeneratorRuntime.awrap(retrieveTemperature());\n\n              case 3:\n                tempResult = _context.sent;\n                _context.next = 6;\n                return _regeneratorRuntime.awrap(tempResult.map(function (_ref2) {\n                  var temperature = _ref2.temperature;\n                  return temperature;\n                }));\n\n              case 6:\n                _temperatures = _context.sent;\n                setTemps(_temperatures);\n                _context.next = 10;\n                return _regeneratorRuntime.awrap(retrievePh());\n\n              case 10:\n                phResult = _context.sent;\n                _context.next = 13;\n                return _regeneratorRuntime.awrap(phResult.map(function (_ref3) {\n                  var ph = _ref3.ph;\n                  return ph;\n                }));\n\n              case 13:\n                _phs = _context.sent;\n                setPhs(_phs);\n                _context.next = 20;\n                break;\n\n              case 17:\n                _context.prev = 17;\n                _context.t0 = _context[\"catch\"](0);\n                throw new Error('something wrong happened');\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, [[0, 17]], Promise);\n      })();\n    }, 10000);\n    return function () {\n      return clearTimeout(timer);\n    };\n  }, []);\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, React.createElement(ImageBackground, {\n    source: require(\"../../../assets/images/lettuce3.jpg\"),\n    style: styles.background,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, React.createElement(Navbar, {\n    onDisplaySide: handleSide,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }), displayed && React.createElement(SideBar, {\n    role: role,\n    onGoToCalendar: onGoToCalendar,\n    onGoToManager: onGoToManager,\n    onGoToCharts: onGoToCharts,\n    onGoToGreenhouse: onGoToGreenhouse,\n    onGoToForecast: onGoToForecast,\n    onGoToLogout: onGoToLogout,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 31\n    }\n  }), React.createElement(Text, {\n    style: styles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }, \"Temperature\"), temperatures ? React.createElement(React.Fragment, null, React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  }, React.createElement(ScrollView, {\n    horizontal: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 25\n    }\n  }, React.createElement(LineChart, {\n    data: {\n      datasets: [{\n        data: temperatures\n      }]\n    },\n    width: temperatures.length * 20 + 50,\n    height: 200,\n    yAxisSuffix: \" C\\u02DA\",\n    yAxisInterval: 1,\n    chartConfig: {\n      backgroundColor: \"#e6e6e6\",\n      backgroundGradientFrom: \"#B2BEB5\",\n      backgroundGradientTo: \"#cccccc\",\n      decimalPlaces: 2,\n      color: function color() {\n        var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.8;\n        return \"rgba(255, 255, 255, \" + opacity + \")\";\n      },\n      labelColor: function labelColor() {\n        var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return \"rgba(255, 255, 255, \" + opacity + \")\";\n      },\n      style: {\n        borderRadius: 16\n      },\n      propsForDots: {\n        r: \"2\",\n        strokeWidth: \"2\",\n        stroke: \"#ffa726\"\n      }\n    },\n    style: {\n      marginTop: 15,\n      alignSelf: \"center\",\n      marginVertical: 8,\n      borderRadius: 16\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 29\n    }\n  })))) : React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 35\n    }\n  }, \"Loading...\"), React.createElement(Text, {\n    style: styles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, \"Ph\"), phs ? React.createElement(React.Fragment, null, React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 21\n    }\n  }, React.createElement(ScrollView, {\n    horizontal: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 25\n    }\n  }, React.createElement(LineChart, {\n    data: {\n      datasets: [{\n        data: phs\n      }]\n    },\n    width: phs.length * 20 + 50,\n    height: 200,\n    yAxisSuffix: \" H+ \",\n    yAxisInterval: 1,\n    chartConfig: {\n      backgroundColor: \"#e6e6e6\",\n      backgroundGradientFrom: \"#B2BEB5\",\n      backgroundGradientTo: \"#cccccc\",\n      decimalPlaces: 2,\n      color: function color() {\n        var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.8;\n        return \"rgba(255, 255, 255, \" + opacity + \")\";\n      },\n      labelColor: function labelColor() {\n        var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return \"rgba(255, 255, 255, \" + opacity + \")\";\n      },\n      style: {\n        borderRadius: 16\n      },\n      propsForDots: {\n        r: \"2\",\n        strokeWidth: \"2\",\n        stroke: \"#ffa726\"\n      }\n    },\n    style: {\n      marginTop: 15,\n      alignSelf: \"center\",\n      marginVertical: 8,\n      borderRadius: 16\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 29\n    }\n  })))) : React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 35\n    }\n  }, \"Loading...\")));\n}\n\nexport default Charts;","map":{"version":3,"sources":["/home/betho/bootcamp/collab/skylab-bootcamp-202004/staff/albert-manzano/aquaponics/aquaponics-app/src/components/Charts/index.js"],"names":["React","useState","useEffect","LineChart","StackedBarChart","Navbar","SideBar","styles","retrievePh","retrieveTemperature","Charts","role","onGoToManager","onGoToCalendar","onGoToCharts","onGoToForecast","onGoToGreenhouse","onGoToLogout","temperatures","setTemps","phs","setPhs","displayed","setSide","handleSide","timer","setTimeout","tempResult","map","temperature","phResult","ph","Error","clearTimeout","container","require","background","title","datasets","data","length","backgroundColor","backgroundGradientFrom","backgroundGradientTo","decimalPlaces","color","opacity","labelColor","style","borderRadius","propsForDots","r","strokeWidth","stroke","marginTop","alignSelf","marginVertical"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n    LineChart,\n    StackedBarChart\n} from \"react-native-chart-kit\";\n\nimport {\n    View,\n    Image,\n    ImageBackground,\n    ActivityIndicator,\n    TouchableHighlight,\n    Text,\n    Dimensions,\n    ScrollView\n} from \"react-native\";\n\nimport Navbar from '../Navbar';\nimport SideBar from '../SideBar'\nimport styles from './styles';\n\nimport { retrievePh, retrieveTemperature } from 'aquaponics-client-logic'\n\nfunction Charts({ role, onGoToManager, onGoToCalendar, onGoToCharts, onGoToForecast, onGoToGreenhouse, onGoToLogout }) {\n    // const [view, setView] = useState('temperature')\n    const [temperatures, setTemps] = useState('')\n    const [phs, setPhs] = useState('')\n    const [displayed, setSide] = useState(false);\n\n    const handleSide = () => setSide(!displayed);\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            (async () => {\n                try {\n                    let tempResult = await retrieveTemperature()\n                    const temperatures = await tempResult.map(({ temperature }) => temperature)\n                    setTemps(temperatures)\n                    let phResult = await retrievePh()\n                    const phs = await phResult.map(({ ph }) => ph)\n                    setPhs(phs)\n                } catch (error) {\n                    throw new Error('something wrong happened')\n                }\n            })()\n        }, 10000);\n        return () => clearTimeout(timer);\n    }, []);\n\n    return (\n        <View style={styles.container}>\n            <ImageBackground\n                source={require(\"../../../assets/images/lettuce3.jpg\")} style={styles.background}>\n                <Navbar onDisplaySide={handleSide} />\n                {displayed && <SideBar role={role} onGoToCalendar={onGoToCalendar} onGoToManager={onGoToManager} onGoToCharts={onGoToCharts} onGoToGreenhouse={onGoToGreenhouse} onGoToForecast={onGoToForecast} onGoToLogout={onGoToLogout} />}\n                <Text style={styles.title}>Temperature</Text>\n                {temperatures ? (<>\n                    <View>\n                        <ScrollView horizontal={true}>\n                            <LineChart\n                                data={{\n                                    // labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\"],\n                                    datasets: [\n                                        {\n                                            data: temperatures\n\n                                        }\n                                    ]\n                                }}\n                                width={temperatures.length * 20 + 50}\n                                height={200}\n                                yAxisSuffix=\" C˚\"\n                                yAxisInterval={1} // optional, defaults to 1\n                                chartConfig={{\n                                    backgroundColor: \"#e6e6e6\",\n                                    backgroundGradientFrom: \"#B2BEB5\",\n                                    backgroundGradientTo: \"#cccccc\",\n                                    decimalPlaces: 2, // optional, defaults to 2dp\n                                    color: (opacity = 0.8) => `rgba(255, 255, 255, ${opacity})`,\n                                    labelColor: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\n                                    style: {\n                                        borderRadius: 16\n                                    },\n                                    propsForDots: {\n                                        r: \"2\",\n                                        strokeWidth: \"2\",\n                                        stroke: \"#ffa726\"\n                                    }\n                                }}\n\n                                style={{\n                                    marginTop: 15,\n                                    alignSelf: \"center\",\n                                    marginVertical: 8,\n                                    borderRadius: 16\n                                }}\n                            /></ScrollView>\n                    </View></>) : <Text>Loading...</Text>}\n\n                <Text style={styles.title}>Ph</Text>\n                {phs ? (<>\n                    <View>\n                        <ScrollView horizontal={true}>\n                            <LineChart\n                                data={{\n                                    // labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\"],\n                                    datasets: [\n                                        {\n                                            data: phs\n\n                                        }\n                                    ]\n                                }}\n                                width={phs.length * 20 + 50}\n                                height={200}\n                                yAxisSuffix=\" H+ \"\n                                yAxisInterval={1} // optional, defaults to 1\n                                chartConfig={{\n                                    backgroundColor: \"#e6e6e6\",\n                                    backgroundGradientFrom: \"#B2BEB5\",\n                                    backgroundGradientTo: \"#cccccc\",\n                                    decimalPlaces: 2, // optional, defaults to 2dp\n                                    color: (opacity = 0.8) => `rgba(255, 255, 255, ${opacity})`,\n                                    labelColor: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\n                                    style: {\n                                        borderRadius: 16\n                                    },\n                                    propsForDots: {\n                                        r: \"2\",\n                                        strokeWidth: \"2\",\n                                        stroke: \"#ffa726\"\n                                    }\n                                }}\n\n                                style={{\n                                    marginTop: 15,\n                                    alignSelf: \"center\",\n                                    marginVertical: 8,\n                                    borderRadius: 16\n                                }}\n                            /></ScrollView>\n                    </View></>) : <Text >Loading...</Text>}\n            </ImageBackground>\n        </View>\n    );\n}\n\nexport default Charts\n"]},"metadata":{},"sourceType":"module"}