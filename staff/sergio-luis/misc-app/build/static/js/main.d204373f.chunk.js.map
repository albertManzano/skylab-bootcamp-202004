{"version":3,"sources":["components/Register.js","components/Login.js","components/App.js","serviceWorker.js","index.js"],"names":["goToLogin","className","action","type","name","placeholder","required","href","onClick","event","preventDefault","goToRegister","useState","React","App","view","setView","handleState","input","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yPAMe,G,WAAA,YAAuB,IAAZA,EAAW,EAAXA,UAElB,OAAO,6BAAUC,UAAU,YACnB,wBAAKA,UAAU,mBAAf,YACA,0BAAMC,OAAO,GAAID,UAAU,kBACvB,2BAAQA,UAAU,kBAAkBE,KAAK,OAAOC,KAAK,OAAOC,YAAY,OAAOC,UAAQ,IACvF,2BAAQL,UAAU,kBAAkBE,KAAK,OAAOC,KAAK,UAAUC,YAAY,UAAUC,UAAQ,IAC7F,2BAAQL,UAAU,kBAAkBE,KAAK,QAAQC,KAAK,QAAQC,YAAY,SAASC,UAAQ,IAC3F,2BAAQL,UAAU,kBAAkBE,KAAK,WAAWC,KAAK,WAAWC,YAAY,WAAWC,UAAQ,IACnG,4BAASL,UAAU,oBAAnB,UACA,uBAAGM,KAAK,aAAaC,QAAS,SAAAC,GAC1BA,EAAMC,iBACNV,EAAU,WAFd,aCZL,G,MAAA,YAA0B,IAAfW,EAAc,EAAdA,aA2BlB,OAAO,6BAASV,UAAU,SAC1B,wBAAIA,UAAU,gBAAd,SACA,0BAAMC,OAAO,GAAGD,UAAU,eACtB,2BAAOA,UAAU,eAAeE,KAAK,QAAQC,KAAK,QAAQC,YAAY,SAASC,UAAQ,IACvF,2BAAOL,UAAU,eAAeE,KAAK,WAAWC,KAAK,WAAWC,YAAY,WAAWC,UAAQ,IAC/F,4BAAQL,UAAU,iBAAlB,UACA,uBAAGM,KAAK,aAAaC,QAAW,SAAAC,GAC5BA,EAAMC,iBACNC,EAAa,cAFjB,gBChCNC,EAAYC,IAAZD,SA8BSE,MA5Bf,WAAgB,IAAD,EACUF,EAAS,YADnB,mBACNG,EADM,KACDC,EADC,KAGPC,EAAc,SAACC,GACfF,EAAQE,IAad,OACE,yBAAKjB,UAAU,OACb,4BAAQA,UAAU,eAER,aAATc,GAAuB,kBAAC,EAAD,CAAUf,UAAWiB,IACnC,UAATF,GAAoB,kBAAC,EAAD,CAAOJ,aAAcM,MCjB5BE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d204373f.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Register.sass';\n\n// import { registerUser } from 'misc-client-logic';\n\nexport default function ({goToLogin}){\n\n        return <section  className=\"register\">\n                <h2  className='register__title'>REGISTER</h2>\n                <form action=\"\"  className=\"register__form\" >\n                    <input  className=\"register__input\" type=\"text\" name='name' placeholder=\"Name\" required />\n                    <input  className=\"register__input\" type=\"text\" name='surname' placeholder=\"Surname\" required/>\n                    <input  className=\"register__input\" type=\"email\" name='email' placeholder=\"E-Mail\" required/>\n                    <input  className=\"register__input\" type=\"password\" name='password' placeholder=\"Password\" required/>\n                    <button  className='register__button'>Submit</button>\n                    <a href=\"google.com\" onClick={event =>{\n                        event.preventDefault()\n                        goToLogin('login')\n                    }}>Login</a>\n                    {/* {this.state.error && <Feedback message={this.state.error} level='error'/>} */}\n                </form>\n            </section>\n    }\n\n     \n\n//     handleSubmit = (event) => {\n//         event.preventDefault()\n\n//         let {name,surname,email,password} = event.target;\n\n//         name = name.value;\n//         surname = surname.value;\n//         email = email.value;\n//         password = password.value;\n\n//         try{\n//             registerUser(name,surname,email,password, (error) =>{\n//                 if(error) return this.setState({error:error.message})\n//                 this.props.onRegister();\n//             })\n//         }catch({message}){\n//             this.setState({error:message})\n//         }\n//     }\n\n//     render(){\n//         return <section  className=\"register\">\n//                 <h2  className='register__title'>REGISTER</h2>\n//                 <form action=\"\"  className=\"register__form\" onSubmit={this.handleSubmit}>\n//                     <input  className=\"register__input\" type=\"text\" name='name' placeholder=\"Name\" required />\n//                     <input  className=\"register__input\" type=\"text\" name='surname' placeholder=\"Surname\" required/>\n//                     <input  className=\"register__input\" type=\"email\" name='email' placeholder=\"E-Mail\" required/>\n//                     <input  className=\"register__input\" type=\"password\" name='password' placeholder=\"Password\" required/>\n//                     <button  className='register__button'>Submit</button>\n//                     <a href=\"\" onClick={event =>{\n//                         event.preventDefault()\n//                         this.props.onClick('login')\n//                     }}>Login</a>\n//                     {this.state.error && <Feedback message={this.state.error} level='error'/>}\n//                 </form>\n//             </section>\n//     }\n\n//   }      ","import React from 'react';\n\nimport './Login.sass';\n\nexport default function ({goToRegister}){\n    // constructor(props){\n    //     super(props)\n\n    //     this.state = { error :''}\n    // }\n\n    // handleSubmit = (event) => {\n    //     event.preventDefault()\n\n    //     let {email,password} = event.target;\n\n    //     email = email.value;\n    //     password = password.value;\n\n    //     try{\n    //         authenticateUser(email,password,(error,token) => {\n    //             if(error) return this.setState({error: error.message});\n\n    //             this.props.onLogin(token);\n    //         })\n    //     }catch({message}){\n    //         this.setState({error:message})\n    //     }\n    // }\n\n  \n        return <section className=\"login\">\n        <h2 className='login__title'>LOGIN</h2>\n        <form action=\"\" className=\"login__form\" >\n            <input className=\"login__input\" type=\"email\" name='email' placeholder=\"E-Mail\" required/>\n            <input className=\"login__input\" type=\"password\" name='password' placeholder=\"Password\" required/>\n            <button className='login__button'>Submit</button>\n            <a href=\"google.com\" onClick = {event=>{\n                event.preventDefault()\n                goToRegister(\"register\")  }} >Register</a>\n            {/* {this.state.error && <Feedback message={this.state.error} level='error'/>} */}\n        </form>\n    </section>\n\n}","import React from 'react';\nimport './App.sass';\nimport Register from \"./Register.js\";\nimport Login from \"./Login.js\";\n\nconst{useState} = React\n\nfunction App() {\n  const [view,setView] = useState('register');\n\n  const handleState = (input) =>{\n        setView(input);\n    }\n    // const handleRegister =() =>{\n    //     setView('login')\n    // }\n    // const handleLogin =(token) =>{\n    //     setToken(token)\n    //     setView('home')\n    // }\n    // const handleLogout = () =>{\n    //     setView('landing')\n\n    // }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">  \n      </header>\n      {view === 'register' && <Register goToLogin={handleState} />}\n      {view === 'login' && <Login goToRegister={handleState} />}\n    \n    </div>\n  );\n}\n\nexport default App;\n\n\n// function App (){\n//     const [view,setView] = useState('landing');\n//     const [token,setToken] = useState('landing');\n\n//     const handleState = (input) =>{\n//         setView(input);\n//     }\n//     const handleRegister =() =>{\n//         setView('login')\n//     }\n//     const handleLogin =(token) =>{\n//         setToken(token)\n//         setView('home')\n//     }\n//     const handleLogout = () =>{\n//         setView('landing')\n\n//     }\n\n  \n\n//         return <>\n            \n//             {view === 'landing' && <Landing onClick={handleState}/>}\n//             {view === 'register' && <Register onClick={handleState} onRegister={handleRegister}/>}\n//             {view === 'login' && <Login onClick={handleState} onLogin={handleLogin}/>}\n//             {view === 'home' && <Home onLogout={handleLogout} token={token}/>}\n\n//         </>\n \n// }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}